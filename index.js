!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,a,o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e};r=L.map("map").setView([42.69793,23.321628],13),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}",{attribution:'Map data &copy; <createCoordinatesReturn href="http://openstreetmap.org">OpenStreetMap</createCoordinatesReturn> contributors, <createCoordinatesReturn href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</createCoordinatesReturn>, Imagery Â© <createCoordinatesReturn href="http://mapbox.com">Mapbox</createCoordinatesReturn>',maxZoom:18,id:"mapbox.streets-basic",accessToken:"pk.eyJ1IjoiY2hpcHNhbiIsImEiOiJqa0JwV1pnIn0.mvduWzyRdcHxK_QIOpetFg"}).addTo(r);L.control.sidebar("sidebar").addTo(r);a=new L.FeatureGroup,r.addLayer(a);var i=new L.Control.Draw({edit:{featureGroup:a},draw:{circle:!1,circlemarker:!1,marker:!1,polygon:!1,polyline:!1}});function c(e,t,n,r){void 0===n&&(n=300),void 0===r&&(r={});var a=o({color:"red"},r);e.forEach(function(e){new L.Circle(e,n,a).addTo(t)})}r.addControl(i);var s=6371e3;function l(e,t,n){void 0===t&&(t=500);var r,a,o=Number(t)/s,i=d(Number(n)),c=d(e.lat),l=d(e.lng),u=Math.sin(c),h=Math.cos(c),f=Math.sin(o),g=Math.cos(o),v=Math.sin(i),m=u*g+h*f*Math.cos(i),b=Math.asin(m),y=v*f*h,M=g-u*m,w=l+Math.atan2(y,M),O=L.latLng(p(b),(p(w)+540)%360-180);return{point:O,new_bearing:(r=e,a=O,(function(e,t){var n=d(e.lat),r=d(t.lat),a=d(t.lng-e.lng),o=Math.sin(a)*Math.cos(r),i=Math.cos(n)*Math.sin(r)-Math.sin(n)*Math.cos(r)*Math.cos(a);return(p(Math.atan2(o,i))+360)%360}(a,r)+180)%360)}}function u(e,t,n){void 0===n&&(n=5);var r=function(e){return r=n,a=(t=e).toString().split(".")[1].length,function(e,t){return t=Math.pow(10,t),Math.ceil(e*t)/t}(t,a-r);var t,r,a},a=e.map(r),o=r(t),i=Math.min.apply(Math,a),c=Math.max.apply(Math,a);return i<=o&&o<=c}function d(e){return e*Math.PI/180}function p(e){return 180*e/Math.PI}var h,f,g,v,m;function b(e,t,n){for(var r=e.getEast(),a=[],o=t;a.push(o),u([t.lng,r],o.lng);)o=l(o,n,h.east).point;return a}function y(e,t){return l(l(e,t/2,h.south).point,t/2,h.east).point}!function(e){e[e.east=90]="east",e[e.west=-90]="west",e[e.north=0]="north",e[e.south=180]="south"}(h||(h={})),function(e){e.northWest="NorthWest"}(f||(f={})),m=(new L.FeatureGroup).addTo(r),$("#radius-size").attr("value",150),g=function(e,t){e.clearLayers();var n=document.getElementById("regenerate-btn");n.onclick=function(e,t){t.clearLayers();var n=Number($("#radius-size").val());console.log(n+"m circle radius");var r=function(e){for(var t=[],n=[],r=e.boundingRectangle.getBounds(),a=Object.freeze(r.getNorthWest()),o=a,i=o,c=1;;c++){var s=b(r,i,e.distance);t.push.apply(t,s);var d=y(i,e.distance);if(!u([r.getNorth(),r.getSouth()],o.lat))break;var p=b(r,d,e.distance);p.pop(),n.push.apply(n,p),i=o=l(a,e.distance*c,h.south).point}return{main:t,fillers:n,combined:t.concat(n)}}({boundingRectangle:e,distance:2*n});c(r.main,t,n),c(r.fillers,t,n,{color:"green"});var a=document.getElementById("download-btn");console.log("Generated "+r.combined.length+" circles "),a.onclick=function(){var e={coordinates:r.combined,circleRadius:n};!function(e,t,n){var r=new Blob([e],{type:n});if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(r,t);else{var a=window.document.createElement("a");a.href=window.URL.createObjectURL(r),a.download=t,document.body.appendChild(a),a.click(),document.body.removeChild(a)}}(JSON.stringify(e),"coords_"+e.coordinates.length+"_r"+n+".json","application/json")}}.bind(null,t,e),n.click()}.bind(null,m),v=m.clearLayers,r.on("draw:created",function(e){var t=e.layerType,n=e.layer;if("rectangle"!==t)return!0;a.clearLayers(),console.log(t+" drawn");var r=n.getLatLngs()[0];a.addLayer(n),console.log("Boundaries of the area of interest:"),console.log(JSON.stringify(r));var o=L.latLngBounds(r.map(function(e){return[e.lat,e.lng]})),i=L.rectangle(o);g(i)}),r.on("draw:deleted",v)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,