!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,o,a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};r=L.map("map").setView([42.69793,23.321628],13),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}",{attribution:'Map data &copy; <createCoordinatesReturn href="http://openstreetmap.org">OpenStreetMap</createCoordinatesReturn> contributors, <createCoordinatesReturn href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</createCoordinatesReturn>, Imagery Â© <createCoordinatesReturn href="http://mapbox.com">Mapbox</createCoordinatesReturn>',maxZoom:18,id:"mapbox.streets-basic",accessToken:"pk.eyJ1IjoiY2hpcHNhbiIsImEiOiJqa0JwV1pnIn0.mvduWzyRdcHxK_QIOpetFg"}).addTo(r);L.control.sidebar("sidebar").addTo(r);o=new L.FeatureGroup,r.addLayer(o);var i=new L.Control.Draw({edit:{featureGroup:o},draw:{circle:!1,circlemarker:!1,marker:!1,polygon:!1,polyline:!1}});r.addControl(i);L.canvas({padding:.5});function c(e,t,n,r){void 0===n&&(n=300),void 0===r&&(r={});a({color:"red"},r);e.forEach(function(e){L.circle(e,{radius:n},r).addTo(t)})}var s=6371e3;function u(e,t,n){void 0===t&&(t=500);var r=Number(t)/s,o=d(Number(n)),a=d(e.lat),i=d(e.lng),c=Math.sin(a),u=Math.cos(a),l=Math.sin(r),f=Math.cos(r),h=Math.sin(o),g=c*f+u*l*Math.cos(o),m=Math.asin(g),v=h*l*u,b=f-c*g,y=i+Math.atan2(v,b);return{point:L.latLng(p(m),(p(y)+540)%360-180)}}function l(e,t){var n=Math.min.apply(Math,e),r=Math.max.apply(Math,e);return n<=t&&t<=r}function d(e){return e*Math.PI/180}function p(e){return 180*e/Math.PI}var f,h,g,m,v;function b(e,t,n){for(var r=e.getEast(),o=[],a=t;o.push(a),l([t.lng,r],a.lng);)a=u(a,n,f.east).point;return o}function y(e,t){return u(u(e,t/2,f.south).point,t/2,f.east).point}!function(e){e[e.east=90]="east",e[e.west=-90]="west",e[e.north=0]="north",e[e.south=180]="south"}(f||(f={})),function(e){e.northWest="NorthWest"}(h||(h={})),v=(new L.FeatureGroup).addTo(r),$("#radius-size").attr("value",150),g=function(e,t){e.clearLayers();var n=document.getElementById("regenerate-btn");n.onclick=function(e,t){t.clearLayers();var n=Number($("#radius-size").val());console.log(n+"m circle radius");var r=function(e){for(var t=[],n=[],r=e.boundingRectangle.getBounds(),o=Object.freeze(r.getNorthWest()),a=o,i=a,c=1;;c++){var s=b(r,i,e.distance);t.push.apply(t,s);var d=y(i,e.distance);if(!l([r.getNorth(),r.getSouth()],a.lat))break;var p=b(r,d,e.distance);p.pop(),n.push.apply(n,p),i=a=u(o,e.distance*c,f.south).point}return{main:t,fillers:n,combined:t.concat(n)}}({boundingRectangle:e,distance:2*n});c(r.main,t,n),c(r.fillers,t,n,{color:"green"});var o=document.getElementById("download-btn");console.log("Generated "+r.combined.length+" circles "),o.onclick=function(){var e={coordinates:r.combined,circle_radius:n};!function(e,t,n){var r=new Blob([e],{type:n});if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(r,t);else{var o=window.document.createElement("a");o.href=window.URL.createObjectURL(r),o.download=t,document.body.appendChild(o),o.click(),document.body.removeChild(o)}}(JSON.stringify(e),"coords_"+e.coordinates.length+"_r"+n+".json","application/json")}}.bind(null,t,e),n.click()}.bind(null,v),m=function(){return v.clearLayers()},r.on("draw:created",function(e){var t=e.layerType,n=e.layer;if("rectangle"!==t)return!0;o.clearLayers(),console.log(t+" drawn");var r=n.getLatLngs()[0];o.addLayer(n),console.log("Boundaries of the area of interest:"),console.log(JSON.stringify(r));var a=L.latLngBounds(r.map(function(e){return[e.lat,e.lng]})),i=L.rectangle(a);g(i)}),r.on("draw:deleted",m)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,